<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.1.1">

    <issue
        id="InternalInsetResource"
        severity="Warning"
        message="Using internal inset dimension resource `status_bar_height` is not supported"
        category="Correctness"
        priority="6"
        summary="Using internal inset dimension resource"
        explanation="The internal inset dimension resources are not a supported way to retrieve the relevant insets for your application. The insets are dynamic values that can change while your app is visible, and your app&apos;s window may not intersect with the system UI. To get the relevant value for your app and listen to updates, use `androidx.core.view.WindowInsetsCompat` and related APIs."
        errorLine1="        val statusBarHeight = context.resources.getIdentifier(&quot;status_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;)"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/minsunghong/ReactNativeStudy/NaverAppClone/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/Screen.kt"
            line="245"
            column="31"/>
    </issue>

    <issue
        id="DiscouragedApi"
        severity="Warning"
        message="Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. `R.foo.bar`) than by name (e.g. `getIdentifier(&quot;bar&quot;, &quot;foo&quot;, null)`)."
        category="Correctness"
        priority="2"
        summary="Using discouraged APIs"
        explanation="Discouraged APIs are allowed and are not deprecated, but they may be unfit for common use (e.g. due to slow performance or subtle behavior)."
        errorLine1="        val statusBarHeight = context.resources.getIdentifier(&quot;status_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;)"
        errorLine2="                                                ~~~~~~~~~~~~~">
        <location
            file="/Users/minsunghong/ReactNativeStudy/NaverAppClone/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/Screen.kt"
            line="245"
            column="49"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="                @TargetApi(Build.VERSION_CODES.LOLLIPOP)"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/minsunghong/ReactNativeStudy/NaverAppClone/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/ScreenWindowTraits.kt"
            line="109"
            column="17"/>
    </issue>

    <issue
        id="AlwaysShowAction"
        severity="Warning"
        message="Prefer &quot;`SHOW_AS_ACTION_IF_ROOM`&quot; instead of &quot;`SHOW_AS_ACTION_ALWAYS`&quot;"
        category="Usability"
        priority="3"
        summary="Usage of `showAsAction=always`"
        explanation="Using `showAsAction=&quot;always&quot;` in menu XML, or `MenuItem.SHOW_AS_ACTION_ALWAYS` in Java code is usually a deviation from the user interface style guide.Use `ifRoom` or the corresponding `MenuItem.SHOW_AS_ACTION_IF_ROOM` instead.&#xA;&#xA;If `always` is used sparingly there are usually no problems and behavior is roughly equivalent to `ifRoom` but with preference over other `ifRoom` items. Using it more than twice in the same menu is a bad idea.&#xA;&#xA;This check looks for menu XML files that contain more than two `always` actions, or some `always` actions and no `ifRoom` actions. In Java code, it looks for projects that contain references to `MenuItem.SHOW_AS_ACTION_ALWAYS` and no references to `MenuItem.SHOW_AS_ACTION_IF_ROOM`."
        errorLine1="                setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS)"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/minsunghong/ReactNativeStudy/NaverAppClone/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/ScreenStackFragment.kt"
            line="176"
            column="42"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `CustomSearchView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor) need to find a constructor with one of the following signatures:&#xA;* `View(Context context)`&#xA;* `View(Context context, AttributeSet attrs)`&#xA;* `View(Context context, AttributeSet attrs, int defStyle)`&#xA;&#xA;If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="class CustomSearchView(context: Context, fragment: Fragment) : SearchView(context) {"
        errorLine2="      ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/minsunghong/ReactNativeStudy/NaverAppClone/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/CustomSearchView.kt"
            line="8"
            column="7"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `CustomToolbar` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor) need to find a constructor with one of the following signatures:&#xA;* `View(Context context)`&#xA;* `View(Context context, AttributeSet attrs)`&#xA;* `View(Context context, AttributeSet attrs, int defStyle)`&#xA;&#xA;If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="open class CustomToolbar(context: Context, val config: ScreenStackHeaderConfig) : Toolbar(context)"
        errorLine2="           ~~~~~~~~~~~~~">
        <location
            file="/Users/minsunghong/ReactNativeStudy/NaverAppClone/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/CustomToolbar.kt"
            line="7"
            column="12"/>
    </issue>

</issues>
